{"./":{"url":"./","title":"Introduction","keywords":"","body":"build web doc 用于构建含评论区（与 GitHub issue 关联）的 GitHub Page 的教程，文档已通过网页形式部署于：https://xy-plus.github.io/webdoc/ 快速构建 执行以下命令： git clone https://github.com/xy-plus/webdoc.git cd webdoc gitbook install gitbook serve 然后访问：http://localhost:4000 即可。 注意：此时你看到的评论区链接的是我的 GitHub issue ，如果试图登录会跳转至本文部署的页面，而非 localhost 。 如果你需要将评论区改为关联到自己的 GitHub issue ，请阅读 3.2 评论区 和 4. 部署网页 。 const gitalk = new Gitalk({ clientID: '00c208c2cc4bae4c64cc', clientSecret: '3dd4511e0db4d8fa14616a395ccb3e05151032ed', repo: 'webdoc', owner: 'xy-plus', admin: ['xy-plus'], createIssueManually: true, id: document.title }) gitalk.render('gitalk-container') require(['gitbook'], function(gitbook) { const gitalk = new Gitalk({ clientID: '00c208c2cc4bae4c64cc', clientSecret: '3dd4511e0db4d8fa14616a395ccb3e05151032ed', repo: 'webdoc', owner: 'xy-plus', admin: ['xy-plus'], createIssueManually: true, id: document.title }) gitbook.events.bind('page.change', initMygitalk) function initMygitalk() { gitalk.render('gitalk-container') } }) "},"1. 编写文档.html":{"url":"1. 编写文档.html","title":"1. 编写文档","keywords":"","body":"编写文档 先上网搜一下怎么用 gitbook 写书，根据要求写好文档和 SUMMARY.md 。 const gitalk = new Gitalk({ clientID: '00c208c2cc4bae4c64cc', clientSecret: '3dd4511e0db4d8fa14616a395ccb3e05151032ed', repo: 'webdoc', owner: 'xy-plus', admin: ['xy-plus'], createIssueManually: true, id: document.title }) gitalk.render('gitalk-container') require(['gitbook'], function(gitbook) { const gitalk = new Gitalk({ clientID: '00c208c2cc4bae4c64cc', clientSecret: '3dd4511e0db4d8fa14616a395ccb3e05151032ed', repo: 'webdoc', owner: 'xy-plus', admin: ['xy-plus'], createIssueManually: true, id: document.title }) gitbook.events.bind('page.change', initMygitalk) function initMygitalk() { gitalk.render('gitalk-container') } }) "},"2. 本地浏览.html":{"url":"2. 本地浏览.html","title":"2. 本地浏览","keywords":"","body":"本地浏览 在包含 SUMMARY.md 的目录下执行：gitbook serve 。 没有这个命令的读者请自行安装 const gitalk = new Gitalk({ clientID: '00c208c2cc4bae4c64cc', clientSecret: '3dd4511e0db4d8fa14616a395ccb3e05151032ed', repo: 'webdoc', owner: 'xy-plus', admin: ['xy-plus'], createIssueManually: true, id: document.title }) gitalk.render('gitalk-container') require(['gitbook'], function(gitbook) { const gitalk = new Gitalk({ clientID: '00c208c2cc4bae4c64cc', clientSecret: '3dd4511e0db4d8fa14616a395ccb3e05151032ed', repo: 'webdoc', owner: 'xy-plus', admin: ['xy-plus'], createIssueManually: true, id: document.title }) gitbook.events.bind('page.change', initMygitalk) function initMygitalk() { gitalk.render('gitalk-container') } }) "},"3. 添加插件.html":{"url":"3. 添加插件.html","title":"3. 添加插件","keywords":"","body":"添加插件 在 SUMMARY.md 的同级目录下创建配置文件 book.json 。 const gitalk = new Gitalk({ clientID: '00c208c2cc4bae4c64cc', clientSecret: '3dd4511e0db4d8fa14616a395ccb3e05151032ed', repo: 'webdoc', owner: 'xy-plus', admin: ['xy-plus'], createIssueManually: true, id: document.title }) gitalk.render('gitalk-container') require(['gitbook'], function(gitbook) { const gitalk = new Gitalk({ clientID: '00c208c2cc4bae4c64cc', clientSecret: '3dd4511e0db4d8fa14616a395ccb3e05151032ed', repo: 'webdoc', owner: 'xy-plus', admin: ['xy-plus'], createIssueManually: true, id: document.title }) gitbook.events.bind('page.change', initMygitalk) function initMygitalk() { gitalk.render('gitalk-container') } }) "},"3.1. 参考配置.html":{"url":"3.1. 参考配置.html","title":"3.1. 参考配置","keywords":"","body":"参考配置 这里给出本网页使用的配置文件： { \"plugins\": [ \"chapter-fold\", \"code\", \"search-pro\", \"github\", \"localized-footer\", \"ancre-navigation\", \"-sharing\" ], \"pluginsConfig\": { \"github\": { \"url\": \"https://github.com/xy-plus/webdoc\" }, \"localized-footer\": { \"filename\": \"gitbook/comment.html\" } }, \"styles\": { \"website\": \"gitbook/website.css\" } } const gitalk = new Gitalk({ clientID: '00c208c2cc4bae4c64cc', clientSecret: '3dd4511e0db4d8fa14616a395ccb3e05151032ed', repo: 'webdoc', owner: 'xy-plus', admin: ['xy-plus'], createIssueManually: true, id: document.title }) gitalk.render('gitalk-container') require(['gitbook'], function(gitbook) { const gitalk = new Gitalk({ clientID: '00c208c2cc4bae4c64cc', clientSecret: '3dd4511e0db4d8fa14616a395ccb3e05151032ed', repo: 'webdoc', owner: 'xy-plus', admin: ['xy-plus'], createIssueManually: true, id: document.title }) gitbook.events.bind('page.change', initMygitalk) function initMygitalk() { gitalk.render('gitalk-container') } }) "},"3.2. 评论区.html":{"url":"3.2. 评论区.html","title":"3.2. 评论区","keywords":"","body":"评论区 实现方法 通过 localized-footer 为每一个页面的末尾增加一段 html 代码： { \"plugins\": [\"localized-footer\"], \"pluginsConfig\": { \"localized-footer\": { \"filename\": \"gitbook/comment.html\" } } } 参数介绍 创建目录用于存放相关文件，我创建了目录 gitbook 用于存放相关文件，文件名为 comment.html 。 我们先单独看一下评论区控件的代码： const gitalk = new Gitalk({ clientID: 'GitHub Application Client ID', clientSecret: 'GitHub Application Client Secret', repo: 'GitHub repo', owner: 'GitHub repo owner', admin: [ 'GitHub repo owner and collaborators, only these guys can initialize github issues' ], createIssueManually: true, id: document.title }) clientID 和 clientSecret 需要通过在 GitHub 上注册获得：https://github.com/settings/applications/new 由于评论区与 GitHub issue 关联，所以需要为每个页面创建一个 issue ，createIssueManually: true 使得管理员能够一键创建 issue ，issue 的标题为 id ，这里使用 document.title 作为页面 id 。 快速生成 修改 profile.conf ，将参数修改为你自己的。注意格式不要乱，因为这一段将被直接嵌入 html 。 执行 set_file.sh ， gitbook/comment.html 将自动根据 profile.conf 生成。 参考代码 当然，你也可以复制我的代码。由于未知的原因（我太菜），下面那段代码需要两次 const gitalk = new Gitalk 填写两次参数，如果有更好的实现方式请提出，谢谢。 const gitalk = new Gitalk({ clientID: '\"GitHub Application Client ID\"', clientSecret: 'GitHub Application Client Secret', repo: 'GitHub repo', owner: 'GitHub repo owner', admin: [ 'GitHub repo owner and collaborators, only these guys can initialize github issues' ], createIssueManually: true, id: document.title }) gitalk.render('gitalk-container') require(['gitbook'], function(gitbook) { const gitalk = new Gitalk({ clientID: 'GitHub Application Client ID', clientSecret: 'GitHub Application Client Secret', repo: 'GitHub repo', owner: 'GitHub repo owner', admin: [ 'GitHub repo owner and collaborators, only these guys can initialize github issues' ], createIssueManually: true, id: document.title }) gitbook.events.bind('page.change', initMygitalk) function initMygitalk() { gitalk.render('gitalk-container') } }) const gitalk = new Gitalk({ clientID: '00c208c2cc4bae4c64cc', clientSecret: '3dd4511e0db4d8fa14616a395ccb3e05151032ed', repo: 'webdoc', owner: 'xy-plus', admin: ['xy-plus'], createIssueManually: true, id: document.title }) gitalk.render('gitalk-container') require(['gitbook'], function(gitbook) { const gitalk = new Gitalk({ clientID: '00c208c2cc4bae4c64cc', clientSecret: '3dd4511e0db4d8fa14616a395ccb3e05151032ed', repo: 'webdoc', owner: 'xy-plus', admin: ['xy-plus'], createIssueManually: true, id: document.title }) gitbook.events.bind('page.change', initMygitalk) function initMygitalk() { gitalk.render('gitalk-container') } }) "},"3.3. 代码高亮.html":{"url":"3.3. 代码高亮.html","title":"3.3. 代码高亮","keywords":"","body":"代码高亮 使用 gitbook 默认高亮 对于大多数被广泛使用的语言，无需做任何配置，在 markdown 中插入代码块就行。 但是如果你要插入一种未被支持的语言，代码块就没有任何高亮，看起来比较丑。 下面给出我的一种解决方案： 使用 prism 插件 禁用 gitbook 默认高亮并使用 prism 高亮插件： // book.json { \"plugins\": [ \"-highlight\", \"prism\" ], \"pluginsConfig\": { \"prism\": { // 设置个人比较喜欢的暗色调主题 // 可以去同目录下找更多的主题 \"css\": [\"prismjs/themes/prism-tomorrom.css\"] } } } 随后通过 gitbook install 安装插件。 最后 gitbook build 就可以看到效果了。 添加自己的语言支持 在安装 prism 插件后，我们可以看一下 node_modules/prismjs/components 文件夹，里面包含了目前可用的所有语言支持。比如说有一个 prism-c.js ，那么就表明支持 C 语言。 下面以我支持 riscv 汇编高亮的流程来举例说明一下： 写一个 prism-riscv.js 并复制到 components 文件夹下，可在这里找到。 这里面只进行简单的词法分析，使用一个正则表达式 pattern 来匹配一种词，并使用别名 alias 来描述这种词的类型，其实也就是决定最后渲染出来这种词的颜色。 我这里大概就是寄存器一种颜色，指令一种颜色，伪指令一种颜色。对于汇编语言这也就够了。 然而 prism 还支持更高级一点的语法分析。 将你的语言注册到 node_modules/prismjs/components.json。 打开看一下，就是在 languages 插入一个描述你的语言的贡献者和名字的键值对。 我的代码如下： # add_riscv_component.py import json json_path = 'node_modules/prismjs/components.json' data = json.load(open(json_path)) data['languages']['riscv'] = {'title': 'RISC-V', 'owner': 'shinbokuow2'} with open(json_path, 'w') as f: f.write(json.dumps(data, sort_keys = True, indent = 4)) 如果只是自己用的话这就够了，想要为 prism 社区做贡献的参考这里。 在 gitbook build 之前做完上面两步，build 之后你会发现 riscv 代码块被正确高亮了！ 行内代码 gitbook 默认的行内代码和普通字体是一个颜色，我们希望它在灰色背景的同时字体变为红色，更加显眼。 我的做法是在 gitbook build 之后直接暴力改生成的 css 。这个 css 放在 docs/gitbook/style.css。（build 之后的结果本来应该放在 _book 文件夹下，为了套用 Github Page 将其重命名为 docs） # add_code_style.py s = open('docs/gitbook/style.css').read() code = 'markdown-section code{' color_red = 'color:#bf616a;' code_in_pre = 'markdown-section pre>code{' color_inherit = 'color:#ccc;' s = s.replace(code, code + color_red) s = s.replace(code_in_pre, code_in_pre + color_inherit) with open('docs/gitbook/style.css', 'w') as f: f.write(s) const gitalk = new Gitalk({ clientID: '00c208c2cc4bae4c64cc', clientSecret: '3dd4511e0db4d8fa14616a395ccb3e05151032ed', repo: 'webdoc', owner: 'xy-plus', admin: ['xy-plus'], createIssueManually: true, id: document.title }) gitalk.render('gitalk-container') require(['gitbook'], function(gitbook) { const gitalk = new Gitalk({ clientID: '00c208c2cc4bae4c64cc', clientSecret: '3dd4511e0db4d8fa14616a395ccb3e05151032ed', repo: 'webdoc', owner: 'xy-plus', admin: ['xy-plus'], createIssueManually: true, id: document.title }) gitbook.events.bind('page.change', initMygitalk) function initMygitalk() { gitalk.render('gitalk-container') } }) "},"4. 部署网页.html":{"url":"4. 部署网页.html","title":"4. 部署网页","keywords":"","body":"部署网页 注意到运行完 gitbook serve 之后，目录下自动生成了 _book 目录，里面包含了生成网页的 html 代码。有两个办法在 GitHub 上 创建网页（本文采用部署到当前仓库）。 部署到新仓库 将 _book 作为新的仓库 push 到 GitHub 上，在仓库的 Settings > GitHub Pages 下选择 sourse 为 master branch 。 为了省事我写了个脚本： update_book.sh gitbook build cd _book rm .gitignore git init git remote add origin https://github.com/xxxxxxxxxxxx.git git add . git commit -m \"update\" git push origin master -f cd .. 部署到当前仓库 修改 _book 目录名为 docs ，在仓库的 Settings > GitHub Pages 下选择 sourse 为 master branch/docs folder 。 以后编写完文档后需要 先删除 原先的 docs 目录，运行 gitbook serve 之后将生成的 _book 目录改名为 docs 为了省事我又写了个脚本： update_book.sh rm -rf docs gitbook build mv _book docs python3 add_code_style.py cd docs rm update_book.sh rm .gitignore git add . git commit -m \"update web\" cd .. git add . git commit -m \"update doc\" git push const gitalk = new Gitalk({ clientID: '00c208c2cc4bae4c64cc', clientSecret: '3dd4511e0db4d8fa14616a395ccb3e05151032ed', repo: 'webdoc', owner: 'xy-plus', admin: ['xy-plus'], createIssueManually: true, id: document.title }) gitalk.render('gitalk-container') require(['gitbook'], function(gitbook) { const gitalk = new Gitalk({ clientID: '00c208c2cc4bae4c64cc', clientSecret: '3dd4511e0db4d8fa14616a395ccb3e05151032ed', repo: 'webdoc', owner: 'xy-plus', admin: ['xy-plus'], createIssueManually: true, id: document.title }) gitbook.events.bind('page.change', initMygitalk) function initMygitalk() { gitalk.render('gitalk-container') } }) "}}